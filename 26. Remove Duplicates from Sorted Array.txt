Time & Space Complexity: Explenation
-------------------------------------------------------------------------
Time Complexty Solution: O(n)
The time complexity of the provided code is O(n), where n is the size of the input array `nums`. 

The code uses a map called `hashMap` to store the elements of `nums` as keys and their corresponding indices as values. It iterates through each element in `nums` in a for loop, which has a complexity of O(n). 

Inside the loop, it calculates the `newTarget` by subtracting the current element from the target. It then checks if the `hashMap` contains the `newTarget`. The `has()` method of the `Map` object has an average time complexity of O(1). 

If the `newTarget` is found in the `hashMap`, it retrieves the corresponding index and updates the `output` array with the indices and returns it. This retrieval operation using the `get()` method of the `Map` object also has an average time complexity of O(1).

If the `newTarget` is not found in the `hashMap`, it adds the current element and its index to the `hashMap` using the `set()` method, which has an average time complexity of O(1). 

Therefore, the overall time complexity of the code is O(n), as each element of `nums` is processed once, and the operations performed inside the loop have constant time complexity.
-------------------------------------------------------------------------
Space Complexity Solution: O(n)
The space complexity of the given "twoSum" function is O(n). Let's analyze the space used by each component of the function:

1. `hashMap`: The hash map is used to store elements from the "nums" array along with their corresponding indices. In the worst case, the hash map can store all "n" elements from the "nums" array, resulting in O(n) space complexity.

2. `output`: The "output" array is used to store the indices of the two numbers that add up to the target. It always has a fixed size of 2, so its space complexity is O(1).

3. `size`: The variable "size" is used to store the length of the "nums" array. It is a single integer variable, so its space complexity is O(1).

4. Temporary variables: There are a few temporary variables used within the function, such as "newTarget" and the loop index "i." These variables use constant space regardless of the size of the input, so their space complexity is also O(1).

Combining all these components, the dominant factor in the space complexity is the space used by the "hashMap," which is O(n). Therefore, the overall space complexity of the "twoSum" function is O(n).
